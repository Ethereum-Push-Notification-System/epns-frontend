"use strict";(self.webpackChunkpush_website=self.webpackChunkpush_website||[]).push([[85919],{339369:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>f,frontMatter:()=>r,metadata:()=>d,toc:()=>h});var i=t(474848),a=t(28453),s=t(411470),o=t(119365);const r={id:"docs-notifications-ns-notif-standards-basic",title:"Notification Standards (Basic)",hide_title:!0,slug:"./notification-standards-basic",displayed_sidebar:"pushNotificationSidebar",sidebar_position:1,image:"/assets/docs/previews/docs_notifications_ns_notif_standards_basic--notification_standards_(basic).png"},c="Notification Standards Overview",d={id:"notifications/notification-standards/docs-notifications-ns-notif-standards-basic",title:"Notification Standards (Basic)",description:"All notifications passed to the network are eventually transformed to JSON payload. The following glossaries help cover some of the basics that can help in understanding what is happening and how to customize the behavior.",source:"@site/docs/notifications/07-notification-standards/01-Notification-Standards-Basic.mdx",sourceDirName:"notifications/07-notification-standards",slug:"/notifications/notification-standards/notification-standards-basic",permalink:"/undefined/docs/notifications/notification-standards/notification-standards-basic",draft:!1,unlisted:!1,editUrl:"https://github.com/push-protocol/push-website/blob/main/docs/notifications/07-notification-standards/01-Notification-Standards-Basic.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"docs-notifications-ns-notif-standards-basic",title:"Notification Standards (Basic)",hide_title:!0,slug:"./notification-standards-basic",displayed_sidebar:"pushNotificationSidebar",sidebar_position:1,image:"/assets/docs/previews/docs_notifications_ns_notif_standards_basic--notification_standards_(basic).png"},sidebar:"pushNotificationSidebar",previous:{title:"Notification Standards",permalink:"/undefined/docs/notifications/notification-standards"},next:{title:"Notification Standards (Advance)",permalink:"/undefined/docs/notifications/notification-standards/notification-standards-advance"}},l={},h=[{value:"Important glossaries",id:"important-glossaries",level:2},{value:"Sending notification examples",id:"sending-notification-examples",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components},{Head:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"notification-standards-overview",children:"Notification Standards Overview"}),"\n",(0,i.jsx)(n.p,{children:"All notifications passed to the network are eventually transformed to JSON payload. The following glossaries help cover some of the basics that can help in understanding what is happening and how to customize the behavior."}),"\n",(0,i.jsx)(t,{children:(0,i.jsx)("title",{children:"Notification Standards (Basic) | Push Notifications | Push Documentation"})}),"\n","\n","\n",(0,i.jsx)(n.h2,{id:"important-glossaries",children:"Important glossaries"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Verification Proof"})," - Each notification sent carries with itself a verification proof that allows the network to validate that the notification is coming from a channel or one of it's delegate."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["Verification Proof is handled automatically by the SDK but you if you want to, you can read about it ",(0,i.jsx)(n.a,{href:"docs/notifications/notification-standards/notification-standards-advance/#notification-verification-proof",title:"post explaining notification verification proof in Push protocol",children:"over here"}),"."]})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Notification Identity"})," - Each notification passed to the network is actually an identity which defines how the notification is formatted, where it's stored, etc."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["Notification identity is abstracted away by the SDK except when invoking directly from your smart contracts. Advance section has detailed explaination about ",(0,i.jsx)(n.a,{href:"docs/notifications/notification-standards/notification-standards-advance/#notification-identity",title:"post explaining notification identity in Push protocol",children:"Notification Identity"}),"."]})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Identity Type"})," - Defines the format in which the notification json payload is sent to the network. Common types you need to know about."]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Identity Type"}),(0,i.jsx)(n.th,{children:"Remarks"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"0"}),(0,i.jsx)(n.td,{children:"Minimal"}),(0,i.jsx)(n.td,{children:"Recommended for Smart Contract"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"2"}),(0,i.jsx)(n.td,{children:"Direct Payload"}),(0,i.jsx)(n.td,{children:"Recommended for PUSH SDK"})]})]})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Notification Type"})," - Defines the type of notification that is sent:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Broadcast (Type 1) - Is sent out to all the users who have opted in to your channel"}),"\n",(0,i.jsx)(n.li,{children:"Targeted (Type 3) - Is sent out to an individual user"}),"\n",(0,i.jsx)(n.li,{children:"Subset (Type 4) - Is sent out to a subset of users of your channel"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Notification Content"})," - Defines the notification content which consists of:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Notification JSON Object - What is shown on your home screen"}),"\n",(0,i.jsx)(n.li,{children:"Payload JSON Object - What is shown and stored on your feed"}),"\n",(0,i.jsx)(n.li,{children:"Recipients - 0x0 for type 1 (broadcast), 0xTarget for type 3 (Targeted) and [0x01, 0x02, 0x03, ..., 0xN] for type 4 (Subset)"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'  // Example Raw Content for targeted notifcation, abstracted away by SDK\n  {\n    "notification": {\n      "title": "The title of your message displayed on screen (50 Chars)",\n      "body": "The intended message displayed on screen (180 Chars)"\n    },\n    "data": { // Is defined as payload most of the time\n      "type": "3" // notification type\n      "sectype": null // enables encrypted notifications\n      "asub": "[Optional] The subject of the message displayed inside app (80 Chars)",\n      "amsg": "[Optional] The intended message displayed inside app (500 Chars)",\n      "acta": "[Optional] The cta link parsed inside the app",\n      "aimg": "[Optional] The image url which is shown inside the app",\n      "etime": "[Optional] if given, notif will be deleted after this in epoch"\n      "hidden" :"[Optional] if given, notif will not show in user feed"\n    },\n      "recipients": 0xtarget\n  }\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["These concepts are for your understanding as most of them are abstracted away but if you wish to dive deeper then read more about ",(0,i.jsx)(n.a,{href:"docs/notifications/notification-standards/notification-standards-advance/#notification-payload",title:"post explaining notification payload in in Push protocol",children:"notification payload here"}),"."]})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Content Markdown"})," - Defines how the content markdown should be passed to enable variety of notifications. Covered in detail in the advanced section - ",(0,i.jsx)(n.a,{href:"docs/notifications/notification-standards/notification-standards-advance/#notification-content",title:"post explaining notification content and how to customize it in in Push protocol",children:"Notification Content"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Sender"})," - Defines who is sending the message. The sender is the channel address or the alias address. The address should be represented in chain specific format as ",(0,i.jsx)(n.a,{href:"/docs/notifications/important-concepts/#chain-specific-wallet-address",title:"About chain specific wallet address",children:"depicted over here"})]}),"\n",(0,i.jsx)(n.p,{children:"Examples:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Ethereum(Mainnet): ",(0,i.jsx)(n.code,{children:"eip155:1:<Address>"})]}),"\n",(0,i.jsxs)(n.li,{children:["Ethereum(Goerli): ",(0,i.jsx)(n.code,{children:"eip155:42:<Address>"})]}),"\n",(0,i.jsxs)(n.li,{children:["Polygon(Mumbai): ",(0,i.jsx)(n.code,{children:"eip155:80001:<Address>"})]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsxs)(n.p,{children:["One exception to chain specific format is for smart contract to smart contract interaction (ie: ",(0,i.jsx)(n.a,{href:"/docs/notifications/build/send-notification-via-smart-contract/",title:"Send notification via smart contract",children:"Send Notification (via smart contract)"}),"), For this specific feature, the native blockchain address is required and not chain specific format."]})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Source"})," - The source from which the notification is coming from. Currently supports ",(0,i.jsx)(n.code,{children:"ETH_MAINNET"}),", ",(0,i.jsx)(n.code,{children:"POLYGON_MAINNET"}),", ",(0,i.jsx)(n.code,{children:"BNB_MAINNET"}),", ",(0,i.jsx)(n.code,{children:"ARB_MAINNET"}),", ",(0,i.jsx)(n.code,{children:"THE_GRAPH"}),", ",(0,i.jsx)(n.code,{children:"ETH_TEST_SEPOLIA"})," ",(0,i.jsx)(n.code,{children:"ETH_TEST_GOERLI"}),", ",(0,i.jsx)(n.code,{children:"POLYGON_TESTNET"}),", ",(0,i.jsx)(n.code,{children:"BNB_TESTNET"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Source is determined ",(0,i.jsx)(n.a,{href:"http://localhost:3000/docs/notifications/build/initialize-user/",title:"Initialize User Push SDK",children:"by the chain at which the user is inititialized"})," from Push SDK, by the network it is coming from in case of smart contracts."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Recipient(s)"})," - The address to the notification should reach. Push supports multiple address formats as ",(0,i.jsx)(n.a,{href:"/docs/notifications/important-concepts/#types-of-supported-wallet-address-account",title:"learn about all supported wallet address account",children:"depicted over here"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Few examples:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Ethereum(Mainnet): ",(0,i.jsx)(n.code,{children:"eip155:1:<Address>"})]}),"\n",(0,i.jsxs)(n.li,{children:["Ethereum(Sepolia): ",(0,i.jsx)(n.code,{children:"eip155:11155111:<Address>"})]}),"\n",(0,i.jsxs)(n.li,{children:["Polygon(Mumbai): ",(0,i.jsx)(n.code,{children:"eip155:80001:<Address>"})]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsxs)(n.p,{children:["One exception to address format support is for smart contract to smart contract interaction (ie: ",(0,i.jsx)(n.a,{href:"/docs/notifications/build/send-notification-via-smart-contract/",title:"Send notification via smart contract",children:"Send Notification (via smart contract)"}),"), For this specific feature, the native blockchain address is required. for example: ",(0,i.jsx)(n.code,{children:"0x99A08ac6254dcf7ccc37CeC662aeba8eFA666666"})]})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"sending-notification-examples",children:"Sending notification examples"}),"\n",(0,i.jsxs)(s.A,{groupId:"notification-examples",children:[(0,i.jsx)(o.A,{value:"Push SDK",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// userAlice.channel.send([recipients], {options?})\n// to send a broadcast notification - pass '*' in recipients array\nconst broadcastNotif = await userAlice.channel.send(['*'], {\n  notification: { title: 'test', body: 'test' },\n});\n\n// userAlice.channel.send([recipients], {options?})\n// to send a targeted notification - pass that single wallet address in recipients array\nconst targetedNotif = await userAlice.channel.send(\n  ['0x99A08ac6254dcf7ccc37CeC662aeba8eFA666666'],\n  {\n    notification: {\n      title: 'test',\n      body: 'test',\n    },\n  }\n);\n\n// userAlice.channel.send([recipients], {options?})\n// to send a subset notification - pass the list of wallet address in recipients array\nconst subsetNotif = await userAlice.channel.send(\n  [randomWallet1, randomWallet2, randomWallet3],\n  {\n    notification: {\n      title: 'test',\n      body: 'test',\n    },\n  }\n);\n"})})}),(0,i.jsxs)(o.A,{value:"Smart Contract",default:!0,children:[(0,i.jsx)(n.p,{children:"While any Notification Identity can be passed in any of the interactions, It's recommended to start with Identity Type 0 (Minimal) for smart contracts."}),(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Format:"})," ",(0,i.jsx)(n.code,{children:"0+<Notification Type>+<Title>+<Body>"})]}),(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"What to call:"})," ",(0,i.jsx)(n.code,{children:"sendNotification(address _channel, address _recipient, bytes calldata _identity)"})]}),(0,i.jsxs)(n.p,{children:["**Additional Rules: **\nNotification Type 1 (Broadcast): Pass recipient as _channel\nNotification Type 3 (Targeted): Pass recipient as intended recipient\nNotification Type 4 (Subset): ",(0,i.jsx)(n.strong,{children:"Not supported yet"})]}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:'IPUSHCommInterface(EPNS_COMM_CONTRACT_ADDRESS_FOR_SPECIFIC_BLOCKCHAIN).sendNotification(\n  YOUR_CHANNEL_ADDRESS, // from channel - recommended to set channel via dApp and put it\'s value -> then once contract is deployed, go back and add the contract address as delegate for your channel\n  to, // to recipient, put address(this) in case you want Broadcast or Subset. For Targeted put the address to which you want to send\n  bytes(\n      string(\n          // We are passing identity here: https://push.org/docs/notifications/notification-standards/notification-standards-advance/#notification-identity\n          abi.encodePacked(\n              "0", // this represents minimal identity, learn more: https://push.org/docs/notifications/notification-standards/notification-standards-advance/#notification-identity\n              "+", // segregator\n              "3", // define notification type:  https://push.org/docs/notifications/build/types-of-notification (1, 3 or 4) = (Broadcast, targeted or subset)\n              "+", // segregator\n              "Title", // this is notification title\n              "+", // segregator\n              "Body" // notification body\n          )\n      )\n  )\n);\n'})})]})]})]})}function f(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},119365:(e,n,t)=>{t.d(n,{A:()=>o});t(296540);var i=t(618215);const a={tabItem:"tabItem_Ymn6"};var s=t(474848);function o(e){let{children:n,hidden:t,className:o}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,i.A)(a.tabItem,o),hidden:t,children:n})}},411470:(e,n,t)=>{t.d(n,{A:()=>w});var i=t(296540),a=t(618215),s=t(823104),o=t(956347),r=t(300205),c=t(757485),d=t(231682),l=t(289466);function h(e){var n,t;return null!==(n=null===(t=i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))||void 0===t?void 0:t.filter(Boolean))&&void 0!==n?n:[]}function u(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=null!=n?n:function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:a}}=e;return{value:n,label:t,attributes:i,default:a}}))}(t);return function(e){const n=(0,d.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function f(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:t}=e;const a=(0,o.W6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=t?t:null}({queryString:n,groupId:t});return[(0,c.aZ)(s),(0,i.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(a.location.search);n.set(s,e),a.replace({...a.location,search:n.toString()})}),[s,a])]}function m(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,s=u(e),[o,c]=(0,i.useState)((()=>function(e){var n;let{defaultValue:t,tabValues:i}=e;if(0===i.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!f({value:t,tabValues:i}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${i.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=null!==(n=i.find((e=>e.default)))&&void 0!==n?n:i[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:s}))),[d,h]=p({queryString:t,groupId:a}),[m,x]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,s]=(0,l.Dv)(t);return[a,(0,i.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:a}),b=(()=>{const e=null!=d?d:m;return f({value:e,tabValues:s})?e:null})();(0,r.A)((()=>{b&&c(b)}),[b]);return{selectedValue:o,selectValue:(0,i.useCallback)((e=>{if(!f({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);c(e),h(e),x(e)}),[h,x,s]),tabValues:s}}var x=t(992303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=t(474848);function y(e){let{className:n,block:t,selectedValue:i,selectValue:o,tabValues:r}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.a_)(),l=e=>{const n=e.currentTarget,t=c.indexOf(n),a=r[t].value;a!==i&&(d(n),o(a))},h=e=>{var n;let t=null;switch(e.key){case"Enter":l(e);break;case"ArrowRight":{var i;const n=c.indexOf(e.currentTarget)+1;t=null!==(i=c[n])&&void 0!==i?i:c[0];break}case"ArrowLeft":{var a;const n=c.indexOf(e.currentTarget)-1;t=null!==(a=c[n])&&void 0!==a?a:c[c.length-1];break}}null===(n=t)||void 0===n||n.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},n),children:r.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>c.push(e),onKeyDown:h,onClick:l,...s,className:(0,a.A)("tabs__item",b.tabItem,null==s?void 0:s.className,{"tabs__item--active":i===n}),children:null!=t?t:n},n)}))})}function g(e){let{lazy:n,children:t,selectedValue:a}=e;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===a));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function v(e){const n=m(e);return(0,j.jsxs)("div",{className:(0,a.A)("tabs-container",b.tabList),children:[(0,j.jsx)(y,{...e,...n}),(0,j.jsx)(g,{...e,...n})]})}function w(e){const n=(0,x.A)();return(0,j.jsx)(v,{...e,children:h(e.children)},String(n))}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var i=t(296540);const a={},s=i.createContext(a);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);